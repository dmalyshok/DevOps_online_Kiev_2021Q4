# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∏–¥–∞ ùëéùë•2 + ùëèùë• + ùëê = 0.
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è ùëé, ùëè, ùëê –∑–∞–¥–∞—é—Ç—Å—è –≤–≤–æ–¥–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
# –í —Å–∫—Ä–∏–ø—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä—É—é—Ç –∑–∞–¥–∞—á—É —Ä–µ—à–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ
# —É—Ä–∞–≤–Ω–µ–Ω–∏—è. –í —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –¢–∞–∫–∂–µ –Ω–∞ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–ø–∏—Å–∞—Ç—å UnitTests.
# –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç solv_square_equation.py –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# - main()
# - validate_param(int) - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –≤–≤–æ–¥ 3 —Ä–∞–∑–∞ –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ
# (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å exception)
# - discriminant(a, b, c)
# - roots(d, a, b, c)
# - solv_square(a, b, c) -> roots
# - square_print(a, b, c, roots) ‚Äì –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞–ø–∏—Å–∞—Ç—å UnitTest.
# –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.

def validate_param(int):
    i = 0
    while True:
        try:
            int = int(input())       
        except ValueError:
            print("Not an integer! Try again.")
            if i == 2:
                break
            else:
                i += 1
                continue
        else:
            return int 
            break 

def discriminant(a, b, c):
    d = (b ** 2) - (4 * a * c)
    roots (d, a, b, c)
    return d

def roots(d, a, b, c):
    # –µ—Å–ª–∏ D < 0, –∫–æ—Ä–Ω–µ–π –Ω–µ—Ç;
    # –µ—Å–ª–∏ D = 0, –µ—Å—Ç—å –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å;
    # –µ—Å–ª–∏ D > 0, –µ—Å—Ç—å –¥–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ—Ä–Ω—è.
    #print('i am from roots ' + str(a) + str(b) + str(c) + str(d) )
    if d < 0:
        print('Quadratic equation have not roots')
        return 'd < 0'
    elif d == 0:
        #—Ö = ‚àíb/2a
        root = -b/(2*a)
        print('Quadratic equation have 1 roots '+ str(root) + ' from quadratic equation '+ str(a) + 'x**2' + '+' + '('  + str(b) + ')' + 'x' + '+' + '(' + str(c) + ')' '=0')
        return 'd == 0'
    elif d > 0:
        print('Quadratic equation have two roots')
        solv_square(a, b, c)
        return 'd > 0'
        

def solv_square(a, b, c):
    d = (b**2) - (4*a*c)
    root1 = (-b + (d**0.5))/(2*a)
    root2 = (-b - (d**0.5))/(2*a)
    roots = str(root1) +' and '+ str(root2)
    square_print(a, b, c, roots)
    return root1,root2

def square_print(a, b, c, roots):
    print('Roots are: ' + str(roots) + ' from quadratic equation '+ str(a) + 'x**2' + '+' + '('  + str(b) + ')' + 'x' + '+' + '(' + str(c) + ')' '=0' )
    #return None

def main():
    print('Enter fist member A: ')
    a = validate_param(int)
    #print(a)
    if a == 0:
        print('Bad way for quadratic equation a=0')
        exit
    elif a != None:
        print('Enter fist member B: ')
        b = validate_param(int)
        #print(b) 
        print('Enter fist member C: ')
        c = validate_param(int)
        #print(c) 
        discriminant(a, b, c)
    else:
        exit

if __name__ == "__main__":
    main()

